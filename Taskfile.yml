version: '3'

tasks:
  syntax_check:
    desc: comprobar sintaxis
    summary: |
      Correción de sintaxis

      Sirve para comprobar que la sintaxis de los archivos es correcta
    cmds:
      - gofmt -e .  > /dev/null

  format_code:
    desc: formatear código
    summary: |
      Formateo de código

      Al ejecutarla, modifica el código para que sea más fácil de leer dando el formato adecuado
    cmds:
      - gofmt -w . 

  test:
    desc: ejecutar tests (salvo conexión a BD)
    summary: |
      Tests

      Automatización de la ejecución de los tests. Utilizamos short para no ejecutar los test de la base de datos ya que 
      debemos asegurarnos que esta está arrancada
    cmds:
      - go test -short ./tests/ -v

  test-complete:
    desc: ejecutar tests includidos conexión a base de datos
    summary: |
      Tests

      Automatización de la ejecución de los tests. NOTA: debe estar disponible la base de datos postgresql en el puerto 5432.
      Se recomienda usar las orden 'docker-compose-test' para ejecutar estos tests
    cmds:
      - go test ./tests/ -v

  docker_local:
    desc: ejecutar docker en local
    summary: |
      Ejecución de docker

      Mediante esta orden ejecutamos directamente el contenedor de docker creado para la ejecución
      de los test. Monta directamente el directorio actual en /app/test y se elimina tras la ejecución
      con la orden --rm
    cmds: 
      - docker run --rm -t -v `pwd`:/app/test pedromfc/evaluaugr

  docker-compose-test:
    desc: ejecutar docker-compose para tests en local
    summary: |
      Ejecución de docker-compose

      Levanta el clúster para poder testear toda la aplicación. Devolvemos el código del servicio para saber
      si los tests se han ejecutado correctamente
    cmds: 
      - docker-compose -f docker-compose.travis.yml up --abort-on-container-exit --exit-code-from app 

  docker-compose-up:
    desc: ejecutar docker-compose para arrancar el servicio
    summary: |
      Ejecución de docker-compose

      Levanta el clúster para poder ejecutar toda la aplicación.
    cmds: 
      - docker-compose up 

  build:
    desc: generar ejecutables
    summary: |
      Generar ejecutables

      Mediante esta orden creamos los ejecutables de la aplicación. Como se puede llevar a cabo directamente
      con la orden install, no hacemos realmente nada
    cmds: 
      - echo "Todo OK. Construimos en install"
  
  install:
    desc: instalar el programa
    summary: |
      Instalar el programa

      Mediante esta orden instalamos el programa. Construye los ejecutables y los mueve directamente al
      directrio $GOPATH/bin
    cmds: 
      - go install ./...

  run:
    deps: [install]
    desc: arrancar el servicio
    summary: |
      Comenzar el microservico

      Mediante esta orden, lo que hacemos es iniciar el servicio. NOTA: se recomienda usar la orden 'docker-compose-deploy' 
      para arrancar el servicio

    cmds:
      - go run ./cmd/main/main.go